'use strict';

{{#with definition}}
    {{#each properties}}
        {{#withDef $ref ../../definitionMap}}
const {{definitionName}} = require('./{{#lowercase}}{{definitionName}}{{/lowercase}}');
        {{/withDef}}
      {{/each}}

/**
 * {{#if description}}{{description}}{{else}}Object definition for {{definitionName}}{{/if}}
 * @class
 **/
class {{definitionName}} {
  /**
   * Initialize a new instance of {{definitionName}}
   * @param {object}    input     - Optional input to initialize with a fixed value.
   **/
  constructor(input) {
    // No input? Skip.
    if (!input) {
      return;
    }

        {{#eq type "object"}}
            {{#if properties}}
    // Load property values from input object
            {{/if}}
            {{#each properties}}
                {{#eq type "array"}}
    this._{{@key}} = [];
                    {{#inArray ../required @key}}
    if ((input.{{@key}} === null) || (input.{{@key}} === undefined)) {
      throw new Error('Cannot initialize. The {{@key}} array cannot be null or undefined');
    }
    for (const subItem of input.{{@key}}) {
                    {{else}}
    for (const subItem of (input.{{@key}} || [])) {
                    {{/inArray}}
                    {{#with items}}
                        {{#if type}}
      // Primative/{{type}} mapping.
      this._{{@key}}.push(subItem);
                        {{else}}
                            {{#withDef $ref ../../../definitionMap}}
      // Parse the {{definitionName}} instance.
      const {{#upperFirst}}{{definitionName}}{{/upperFirst}} = require('./{{#lowercase}}{{definitionName}}{{/lowercase}}');
      const parsedItem = new {{#upperFirst}}{{definitionName}}{{/upperFirst}}(subItem);
      this._{{@key}}.push(parsedItem);
                            {{else}}
      throw new Error('Could not find definition for items collection');
                            {{/withDef}}
                        {{/if}}
                    {{else}}
      throw new Error('Cannot handle array: no items collection defined');
                    {{/with}}
    }
                {{else}}
    if ((input.{{@key}} !== null) && (input.{{@key}} !== undefined)) {
                    {{#withDef $ref ../../definitionMap}}
        this._{{@key}} = new {{definitionName}}(input.{{@key}});
                    {{else}}
      this._{{@key}} = input.{{@key}};
                    {{/withDef}}
                    {{#inArray ../required @key}} 
    } else {
      throw new Error('Cannot initialize {{definitionName}} - {{@key}} cannot be null or undefined');
                    {{/inArray}}
    }
                {{/eq}}
            {{/each}}
            {{#if additionalProperties}}
    // Any additionalProperties are direct mapped.
    this.additionalProperties = {};
    for (const key in input) {
                {{#each properties}}
      // Skip known property {{@key}}
      if (key === "{{@key}}") {
        continue;
      }      

                {{/each}}
                {{#with additionalProperties}}
      const innerMapper =
                    {{#eq type "array"}}
          // Can't validate array members yet this way.
          (x) => x;
                    {{else}}          
                        {{#withDef $ref ../../definitionMap}}
          // Typed mapping
          x => new (require('./{{#lowercase}}{{definitionName}}{{/lowercase}}'))(x);
                        {{else}}
          // Native type/untyped.
          x => x;
                        {{/withDef}}
                    {{/eq}}

      // Calculate the item we add to the map
      const result = 
                    {{#eq type "array"}}
        // Array case - Map each member of source array
        input[key].map(x => innerMapper(x));
                    {{else}}
        // Non-Array case - Direct usage of inner mapper
        innerMapper(input[key]);
                    {{/eq}}
                {{/with}}

      // Not known, so must be an additional property
      this.additionalProperties[key] = result;
    } 
            {{/if}}
        {{else}}
    // Direct value storage
    this._value = input;
        {{/eq}}
  }
    {{#eq type "object"}}
        {{#each properties}}

  /**
   * {{#if description}}{{description}}{{else}}Get value of {{@key}}{{/if}}
   * @returns - Current value of {{@key}}.
   **/
  get {{@key}}() {
    return this._{{@key}};
  }

  /**
   * Change the value of {{@key}}.
   * @param newVal - New value to assign.
   **/
  set {{@key}}(newVal) {
            {{#inArray ../required @key}}
    if ((newVal === null) || (newVal === undefined)) {
      throw new Error('Cannot change value to null, not permitted.');
    }
            {{/inArray}}
    this._{{@key}} = newVal;
  }
        {{/each}}
    {{else}}
  /**
   * Get the value of this entity.
   **/
  get value() {
    return this._value;
  }

  /**
   * Set the value of this entity
   **/
  set value(newValue) {
    this._value = newValue;
  }
    {{/eq}}
  /**
   * Convert the current instance to a plain object
   * for serialization purposes.
   * @returns {object} - Plain object.
   **/
  toJSON() {
    {{#eq type "object"}}
    const result = {};
        {{#if additionalProperties}}
    // Import any non-canonical properties first
    for (const key in this.additionalProperties) {
      result[key] = this.additionalProperties[key];
    } 

        {{/if}}
        {{#each properties}}
    result.{{@key}} = this._{{@key}};
        {{/each}}
    return result;
    {{else}}
    return this._value;
    {{/eq}}
  }

  /**
   * Completely clone this instance.
   * @returns {{{definitionName}}} - Cloned object.
   **/
  clone() {
    // Complete serialize and deserialize.
    const obj = JSON.parse(JSON.stringify(this));

    // Re-parse using constructor
    return new {{definitionName}}(obj);
  }
}

module.exports = {{definitionName}};
{{/with}}
